type Query {
    getAllUsers: [User]
    getAllContactByContactId(contactId: Int!): [Contact]
    getUserByToken(token: String!): User
}

type Mutation {
    addToBlackList(contactId: Int!): Contact
    removeFromBlackList(contactId: Int!): Boolean
    acceptContactInvitation(contactId: Int!): Contact
    addToContact(contact: ContactRequest): Contact
    removeFromContact(contactId: Int!): Boolean
#    setOrUpdateProfileImageUrl(profileImage: Upload!, id: ID!): String
    updateUser(user: UserUpdateRequest, id: ID!): User
    updatePassword(newPassword: String!, oldPassword: String!, id: ID!): Boolean
}

type User {
    id: ID!
    firstname: String
    lastname: String
    email: String
    username: String
    profileImageId: String
    profileImageUrl: String
    enabled: Boolean
    createdAt: String
    updatedAt: String
    accountLocked: Boolean
}

input ContactRequest {
    user: Int!
    contact: Int!
    isAccepted: Boolean
    isBlacklisted: Boolean
}

input UserUpdateRequest {
    firstname: String
    lastname: String
    username: String
}

type Contact {
    id: Int
    user: User
    contact: User
    isAccepted: Boolean
    isBlacklisted: Boolean
}

#scalar Upload